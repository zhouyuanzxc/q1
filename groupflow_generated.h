// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_GROUPFLOW_GROUPLAYER_H_
#define FLATBUFFERS_GENERATED_GROUPFLOW_GROUPLAYER_H_

#include "flatbuffers/flatbuffers.h"

namespace GroupLayer {

struct FlowItem_Fb;
struct FlowItem_FbBuilder;

struct GroupLayer_Fb;
struct GroupLayer_FbBuilder;

struct FlowItem_Fb FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FlowItem_FbBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_KEY = 4,
    VT_ORDINDEX = 6,
    VT_AXISTYPE = 8,
    VT_SHAPE = 10,
    VT_PTX_START = 12,
    VT_PTY_START = 14,
    VT_PTX_END = 16,
    VT_PTY_END = 18,
    VT_RADIUS = 20,
    VT_LENGTH = 22,
    VT_WIDTH = 24,
    VT_ANGLE = 26,
    VT_STATUS = 28
  };
  int32_t key() const {
    return GetField<int32_t>(VT_KEY, 0);
  }
  int32_t ordindex() const {
    return GetField<int32_t>(VT_ORDINDEX, 0);
  }
  int32_t axistype() const {
    return GetField<int32_t>(VT_AXISTYPE, 0);
  }
  int32_t shape() const {
    return GetField<int32_t>(VT_SHAPE, 0);
  }
  float ptx_start() const {
    return GetField<float>(VT_PTX_START, 0.0f);
  }
  float pty_start() const {
    return GetField<float>(VT_PTY_START, 0.0f);
  }
  float ptx_end() const {
    return GetField<float>(VT_PTX_END, 0.0f);
  }
  float pty_end() const {
    return GetField<float>(VT_PTY_END, 0.0f);
  }
  float radius() const {
    return GetField<float>(VT_RADIUS, 0.0f);
  }
  float length() const {
    return GetField<float>(VT_LENGTH, 0.0f);
  }
  float width() const {
    return GetField<float>(VT_WIDTH, 0.0f);
  }
  float angle() const {
    return GetField<float>(VT_ANGLE, 0.0f);
  }
  int32_t status() const {
    return GetField<int32_t>(VT_STATUS, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_KEY) &&
           VerifyField<int32_t>(verifier, VT_ORDINDEX) &&
           VerifyField<int32_t>(verifier, VT_AXISTYPE) &&
           VerifyField<int32_t>(verifier, VT_SHAPE) &&
           VerifyField<float>(verifier, VT_PTX_START) &&
           VerifyField<float>(verifier, VT_PTY_START) &&
           VerifyField<float>(verifier, VT_PTX_END) &&
           VerifyField<float>(verifier, VT_PTY_END) &&
           VerifyField<float>(verifier, VT_RADIUS) &&
           VerifyField<float>(verifier, VT_LENGTH) &&
           VerifyField<float>(verifier, VT_WIDTH) &&
           VerifyField<float>(verifier, VT_ANGLE) &&
           VerifyField<int32_t>(verifier, VT_STATUS) &&
           verifier.EndTable();
  }
};

struct FlowItem_FbBuilder {
  typedef FlowItem_Fb Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_key(int32_t key) {
    fbb_.AddElement<int32_t>(FlowItem_Fb::VT_KEY, key, 0);
  }
  void add_ordindex(int32_t ordindex) {
    fbb_.AddElement<int32_t>(FlowItem_Fb::VT_ORDINDEX, ordindex, 0);
  }
  void add_axistype(int32_t axistype) {
    fbb_.AddElement<int32_t>(FlowItem_Fb::VT_AXISTYPE, axistype, 0);
  }
  void add_shape(int32_t shape) {
    fbb_.AddElement<int32_t>(FlowItem_Fb::VT_SHAPE, shape, 0);
  }
  void add_ptx_start(float ptx_start) {
    fbb_.AddElement<float>(FlowItem_Fb::VT_PTX_START, ptx_start, 0.0f);
  }
  void add_pty_start(float pty_start) {
    fbb_.AddElement<float>(FlowItem_Fb::VT_PTY_START, pty_start, 0.0f);
  }
  void add_ptx_end(float ptx_end) {
    fbb_.AddElement<float>(FlowItem_Fb::VT_PTX_END, ptx_end, 0.0f);
  }
  void add_pty_end(float pty_end) {
    fbb_.AddElement<float>(FlowItem_Fb::VT_PTY_END, pty_end, 0.0f);
  }
  void add_radius(float radius) {
    fbb_.AddElement<float>(FlowItem_Fb::VT_RADIUS, radius, 0.0f);
  }
  void add_length(float length) {
    fbb_.AddElement<float>(FlowItem_Fb::VT_LENGTH, length, 0.0f);
  }
  void add_width(float width) {
    fbb_.AddElement<float>(FlowItem_Fb::VT_WIDTH, width, 0.0f);
  }
  void add_angle(float angle) {
    fbb_.AddElement<float>(FlowItem_Fb::VT_ANGLE, angle, 0.0f);
  }
  void add_status(int32_t status) {
    fbb_.AddElement<int32_t>(FlowItem_Fb::VT_STATUS, status, 0);
  }
  explicit FlowItem_FbBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<FlowItem_Fb> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FlowItem_Fb>(end);
    return o;
  }
};

inline flatbuffers::Offset<FlowItem_Fb> CreateFlowItem_Fb(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t key = 0,
    int32_t ordindex = 0,
    int32_t axistype = 0,
    int32_t shape = 0,
    float ptx_start = 0.0f,
    float pty_start = 0.0f,
    float ptx_end = 0.0f,
    float pty_end = 0.0f,
    float radius = 0.0f,
    float length = 0.0f,
    float width = 0.0f,
    float angle = 0.0f,
    int32_t status = 0) {
  FlowItem_FbBuilder builder_(_fbb);
  builder_.add_status(status);
  builder_.add_angle(angle);
  builder_.add_width(width);
  builder_.add_length(length);
  builder_.add_radius(radius);
  builder_.add_pty_end(pty_end);
  builder_.add_ptx_end(ptx_end);
  builder_.add_pty_start(pty_start);
  builder_.add_ptx_start(ptx_start);
  builder_.add_shape(shape);
  builder_.add_axistype(axistype);
  builder_.add_ordindex(ordindex);
  builder_.add_key(key);
  return builder_.Finish();
}

struct GroupLayer_Fb FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef GroupLayer_FbBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_DEVNAME = 4,
    VT_FLOWITEMLIST = 6
  };
  const flatbuffers::String *devname() const {
    return GetPointer<const flatbuffers::String *>(VT_DEVNAME);
  }
  const flatbuffers::Vector<flatbuffers::Offset<GroupLayer::FlowItem_Fb>> *flowitemlist() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<GroupLayer::FlowItem_Fb>> *>(VT_FLOWITEMLIST);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_DEVNAME) &&
           verifier.VerifyString(devname()) &&
           VerifyOffset(verifier, VT_FLOWITEMLIST) &&
           verifier.VerifyVector(flowitemlist()) &&
           verifier.VerifyVectorOfTables(flowitemlist()) &&
           verifier.EndTable();
  }
};

struct GroupLayer_FbBuilder {
  typedef GroupLayer_Fb Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_devname(flatbuffers::Offset<flatbuffers::String> devname) {
    fbb_.AddOffset(GroupLayer_Fb::VT_DEVNAME, devname);
  }
  void add_flowitemlist(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<GroupLayer::FlowItem_Fb>>> flowitemlist) {
    fbb_.AddOffset(GroupLayer_Fb::VT_FLOWITEMLIST, flowitemlist);
  }
  explicit GroupLayer_FbBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<GroupLayer_Fb> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<GroupLayer_Fb>(end);
    return o;
  }
};

inline flatbuffers::Offset<GroupLayer_Fb> CreateGroupLayer_Fb(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> devname = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<GroupLayer::FlowItem_Fb>>> flowitemlist = 0) {
  GroupLayer_FbBuilder builder_(_fbb);
  builder_.add_flowitemlist(flowitemlist);
  builder_.add_devname(devname);
  return builder_.Finish();
}

inline flatbuffers::Offset<GroupLayer_Fb> CreateGroupLayer_FbDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *devname = nullptr,
    const std::vector<flatbuffers::Offset<GroupLayer::FlowItem_Fb>> *flowitemlist = nullptr) {
  auto devname__ = devname ? _fbb.CreateString(devname) : 0;
  auto flowitemlist__ = flowitemlist ? _fbb.CreateVector<flatbuffers::Offset<GroupLayer::FlowItem_Fb>>(*flowitemlist) : 0;
  return GroupLayer::CreateGroupLayer_Fb(
      _fbb,
      devname__,
      flowitemlist__);
}

inline const GroupLayer::GroupLayer_Fb *GetGroupLayer_Fb(const void *buf) {
  return flatbuffers::GetRoot<GroupLayer::GroupLayer_Fb>(buf);
}

inline const GroupLayer::GroupLayer_Fb *GetSizePrefixedGroupLayer_Fb(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<GroupLayer::GroupLayer_Fb>(buf);
}

inline bool VerifyGroupLayer_FbBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<GroupLayer::GroupLayer_Fb>(nullptr);
}

inline bool VerifySizePrefixedGroupLayer_FbBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<GroupLayer::GroupLayer_Fb>(nullptr);
}

inline void FinishGroupLayer_FbBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<GroupLayer::GroupLayer_Fb> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedGroupLayer_FbBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<GroupLayer::GroupLayer_Fb> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace GroupLayer

#endif  // FLATBUFFERS_GENERATED_GROUPFLOW_GROUPLAYER_H_
